#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import os.path
import sys
import time
import datetime #importing the date and time library
import random
from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw
from PIL import ImageColor
import telepot #for telegram bot
from telepot.loop import MessageLoop
from telepot.namedtuple import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ForceReply
from time import sleep # to provide delays in program
from samplebase import SampleBase #rpi-rgb samplebase
from rgbmatrix import graphics
import emoji
#from Colored import rgb #smooth color


now = datetime.datetime.now() #Getting date
# insert your telegram token below
print ('Listening....')
class DisplayBox(SampleBase):
    messages = [] #contains telegram messages received
    jobs = [] #contains jobs
    botToken = 'TOKEN ID generated by TELEGRAM APP' #!!!fill with telegram bot token 
    bot = telepot.Bot(botToken)
    tgMsgFile = "messagesFile.dat" #msg to be shown
    tgMsgBackUp = "messagesBackUp.dat" #all msgs ever received
    #initialization setting
    def __init__(self, *args, **kwargs):
        super(DisplayBox, self).__init__(*args, **kwargs)
        self.parser.add_argument("-s", "--sec", help="Time for scrolling in seconds", default=0.07)

    def run(self):
        offscreen_canvas = self.matrix.CreateFrameCanvas()

        #load and set up fonts
        font7x13 = graphics.Font()
        font7x13.LoadFont("/home/pi/rpi-rgb-led-matrix/fonts/7x13.bdf") #!!!fill with path to bdf font
        font5x8 = graphics.Font() 
        font5x8.LoadFont("/home/pi/rpi-rgb-led-matrix/fonts/5x8.bdf") #!!!fill with path to bdf font

        #set up variables
        colour = ImageColor.getrgb('red') #used for customized colors
        smoothColor = graphics.Color(0, 0, 0)
        my_sec = float(self.args.sec) #time for scrolling
        finish = False #flag for end of string scrolling
        clockWidht = 25 #width set to 25 (content of clock lenght)

        #telegram bot loop
        MessageLoop(self.bot,self.on_chat_message).run_as_thread()

        #import telegram messages from old run
        self.messages = self.importFromFile(self.tgMsgFile)

        while True:

            #------------GET CONTROLSTATICALLY--------------
            self.jobs = [] #empty out job list
            self.jobs.append({'description': 'clock'})
            self.jobs.append({'description': 'telegramBotText'})
            #add other jobs..

            #do every job
            for job in self.jobs:
                command = job["description"]
                
                #SHOW CLOCK
                #------------ clock  ------------------------------------
                if command == "clock":
                    start_time = time.time() #get starting time
                    clockDuration = 10 #seconds of showing clock
                    x_pos = int(self.matrix.width/2 - clockWidht/2) #Center horizzontally (from lf to rg): half of display width - half of the content
                    y_pos = int(self.matrix.height-(self.matrix.height/2 - 7/2)) #Center vertically (from top to bot): proper for 7x13 font (instead change 7/2)

                    while(time.time() < (start_time + clockDuration)): #clock for clockDuration sec
                        self.matrix.brightness = 40
                        
                        r, g, b = ImageColor.getrgb('red') #get rgb color
                        smoothColor = graphics.Color(r, g, b) #set up color
                        clockTime = datetime.datetime.now().strftime("%H:%M") #get time
                        time.sleep(0.2) #wait a little

                        #clockWidht = self.showText(x_pos, y_pos, offscreen_canvas, font5x8, smoothColor, clockTime) #return text width
                        clockWidht = self.showTextAndBack(x_pos, y_pos, offscreen_canvas, font5x8, smoothColor, clockTime, b - (b/1.5), r - (r/1.5), g - (g/1.5)) #return text width

                #SHOW MESSAGES RECEIVED FROM TELEGRAM
                #------------  telegramBot Text ------------------------------------
                elif command == "telegramBotText":
                    x_pos = int(self.matrix.width) #start at right
                    y_pos = int(self.matrix.height-(self.matrix.height/2 - 7/2)) #Center vertically (from top to bot): proper for 7x13 font (instead change 7/2)
                    #for every msg in list
                    if (self.messages != []):
                        for msg in self.messages:
                           # print ('msg: %s' % msg)
                           # begin scrolling item
                            while True:
                                self.matrix.brightness = 60 #adjust brightness
                                r, g, b = ImageColor.getrgb('red') #get rgb color
                                smoothColor = graphics.Color(r, g, b) #set up color
                                finish, x_pos = self.showScrollingText(x_pos, y_pos, offscreen_canvas, font7x13, smoothColor, msg) #returns finish flag and next position

                                if(finish == True):
                                    finish = False #item finished
                                    x_pos = offscreen_canvas.width #reset position
                                    break

                                #scrolling time in s
                                time.sleep(my_sec)

                else:
                    print("Command not recognized")

    #Get list of strings separated from \n imported from filePath
    def importFromFile(self, filePath):
        list = [] #empty out list
        if os.path.isfile(filePath) : #check if file exists
            f=open(filePath,"r")
            fileString = f.read() #get all file content
            fileSplitted = fileString.split("\n") #use \n as elements separator
            for msg in fileSplitted:
                if (msg != ""): #delete empty strings
                    list.append(msg)
            #close file
            f.close()
        return list
	#After telegram message received: process message
    def on_chat_message(self, msg):
        #get infos from telegram message
        content_type, chat_type, chat_id = telepot.glance(msg)
        #setup Buttons layout
        markup = ReplyKeyboardMarkup(keyboard=[
                        ['Show Messages', 'Delete Messages'],
                        #['Plain text', KeyboardButton(text='Text only')],
                    ])

        #process text
        if content_type == 'text':
            msgText = msg['text']

            if content_type != 'text':
                self.bot.sendMessage(chat_id, emoji.emojize('Only Text Please :confounded:', use_aliases=True), reply_markup=markup)

            #-----FIRST ACCESS------
            elif msgText == "/start":
                self.bot.sendMessage(chat_id, emoji.emojize('Hello :smile: \n write a message to display it on  DisplayBox (but no emotions)', use_aliases=True), reply_markup=markup)

            #-----SHOW MESSAGES------
            elif msgText == "Show Messages":
                if self.messages == []:
                    self.bot.sendMessage(chat_id, emoji.emojize('There are no messages :confounded:', use_aliases=True), reply_markup=markup)
                else:
                    self.bot.sendMessage(chat_id, emoji.emojize('Here is the list of messages:', use_aliases=True), reply_markup=markup)
                    for message in self.messages:
                        self.bot.sendMessage(chat_id, message)

            #-----DELETE MESSAGES------
            elif msgText == "Delete Messages":
                if self.messages == []:
                    self.bot.sendMessage(chat_id, emoji.emojize('The List is already empty :confounded:', use_aliases=True), reply_markup=markup)
                else:
                    self.bot.sendMessage(chat_id, emoji.emojize('A clean List :sunglasses:', use_aliases=True), reply_markup=markup)
                #reset list
                self.messages = []
                if os.path.isfile(self.tgMsgFile): #check if file exists
                    os.remove(self.tgMsgFile) #delete file

            #-----NEW MESSAGE----------
            else:
                #insert msg in messages list
                self.messages.append(msgText)
                #send back to user insertion confirmation
                self.bot.sendMessage(chat_id, emoji.emojize('Message added to the List :wink:', use_aliases=True), reply_markup=markup)
                self.backUpMsg(msgText, self.tgMsgFile) #add msg in the temporary shown messages
                self.backUpMsg(msgText, self.tgMsgBackUp) #add msg even permanently

    #write a msgText and a separator (\n) in a file
    def backUpMsg(self, msgText, fileName):
        #open messages File
        f=open(fileName,"a+")
        #update messagesBackUp
        f.write(u"%s\n" % msgText)
        #close file
        f.close()

    #write a msgText and a separator (\n) in a file
    def backUpMsg(self, msgText, fileName):
        #open messages File
        f=open(fileName,"a+")
        #update messagesBackUp
        f.write(u"%s\n" % msgText)
        #close file
        f.close()

    def showScrollingText(self, x_pos, y_pos, offscreen_canvas, font, textColor, text):
        len = self.showText(x_pos, y_pos, offscreen_canvas, font, textColor, text)

        #scroll text
        x_pos -= 1 #decrement position
        if (x_pos + len < 0): #when the text has been entirely scrolled
            #finish = True
            return True, x_pos

        return False, x_pos

    def showText(self, x_pos, y_pos, offscreen_canvas, font, textColor, text):
        offscreen_canvas.Clear() #clear screen
        # draw text on matrix
        # 4-th arg is the vertical position for text
        len = graphics.DrawText(offscreen_canvas, font, x_pos, y_pos, textColor, text)
        #show the new matrix
        offscreen_canvas = self.matrix.SwapOnVSync(offscreen_canvas)
        return len #return text width in pixel

    #show text and upper and lower lines as decoration
    def showTextAndBack(self, x_pos, y_pos, offscreen_canvas, font, textColor, text, r, g, b):
        offscreen_canvas.Clear() #clear screen
        #back
        #offscreen_canvas.Fill(r, g, b)
        self.drowCorner(x_pos, y_pos, offscreen_canvas, font, textColor, text, r, g, b)

        # draw text on matrix
        # 4-th arg is the vertical position for text
        len = graphics.DrawText(offscreen_canvas, font, x_pos, y_pos, textColor, text)
        #show the new matrix
        offscreen_canvas = self.matrix.SwapOnVSync(offscreen_canvas)
        return len #return text width in pixel

    def drowCorner(self, x_pos, y_pos, offscreen_canvas, font, textColor, text, r, g, b):
        col = graphics.Color(r, g, b)
        graphics.DrawLine(offscreen_canvas, 0, 31, 63, 31, col)
        graphics.DrawLine(offscreen_canvas, 0, 30, 63, 30, col)
        graphics.DrawLine(offscreen_canvas, 0, 29, 63, 29, col)
        graphics.DrawLine(offscreen_canvas, 0, 2, 63, 2, col)
        graphics.DrawLine(offscreen_canvas, 0, 1, 63, 1, col)
        graphics.DrawLine(offscreen_canvas, 0, 0, 63, 0, col)
        return

# Main function
if __name__ == "__main__":
    display_box = DisplayBox()
    if (not display_box.process()):
        display_box.print_help()
 
